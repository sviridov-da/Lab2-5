/*
Результатом должна быть консольная программа с текстовым меню. Программа
должна содержать шаблонный класс для управления данными согласно заданию.
Для хранения данных необходимо выбрать оптимальный с точки зрения задания
контейнер.
1. Предусмотреть операции добавления, изменения и удаления элемента
контейнера.
2. Реализовать ввод и вывод элементов контейнера с использованием потоковых
итераторов на экран и в файл.
3. Реализовать операции поиска по заданным критериям и выборки подмножества
элементов по заданным критериям. Реализовать поиск в двух вариантах: линейный
поиск и двоичный поиск на отсортированном контейнере.
4. Предусмотреть вывод подмножества выборки на экран и в файл.


Вариант 5. Модель компьютера характеризуется кодом и названием марки компьютера, типом
процессора, частотой работы процессора, объемом оперативной памяти, объемом
жесткого диска, объемом памяти видеокарты, стоимостью компьютера и
количеством экземпляров. Поиск по типу процессора, объему ОЗУ, памяти
видеокарты и объему жесткого диска.
*/
#include <iostream>
#include "DataStorage.h"
#include "computer_model.h"

int main()
{
    /*data_storage<int> storage;
    storage.Add(1);
    storage.Add(3);
    storage.Add(10);
    storage.Add(24);*/

    data_storage<computer_model> storage;
    /*storage.Add(computer_model(123, "asus", "intel", 4096, 1024, 2048, 10000.00, 10));
    storage.Add(computer_model(123, "hp", "amd", 4096, 1024, 2048, 10000.00, 10));
    storage.Add(computer_model(123, "dexp", "ryzen", 4096, 1024, 2048, 10000.00, 10));
    storage.Add(computer_model(123, "hp", "intel", 4096, 1024, 2048, 10000.00, 10));*/
    ifstream is("test.txt"); 
    is >> storage;
    is.close();

    cout << storage;
    cout << "***********";
    storage.sort();
    cout << storage;
}
